import networkx as nx 

# load points from the truth database 
points = {
    1: [-0.87, -7.46, 1.25, 0.7071067811865475, 0.0, 0.7071067811865475, 3.14],
    2: [-3.69289, -7.62259, 1.25018, -0.0011249104131663538, -0.9999993672879969, -4.1025415068152057e-07, 1.57079],
    3: [-2.32034, -8.17165, 1.25079, 0.5205462621060404, 0.6773913410808513, 0.5197812617208467, -1.9516053071795865],
    4: [-5.08128, -6.69433, 1.24913, 0.6218470999367445, 0.4767440766173083, 0.6213060998498006, -2.2529853071795864],
    5: [-5.00266, -8.24903, 1.25085, -0.5205469911374273, -0.6773909884670798, -0.5197809911504688, 1.95161],
    6: [-4.91708, -7.11506, 1.24953, 0.6948568117542819, 0.1861289495752547, 0.6946438118119864, -2.7750553071795863],
    7: [-6.1887, -8.70692, 1.25138, -0.6787710826841651, -0.2810230342326825, -0.6784510826451845, 2.59509],
    8: [-6.80704, -7.23624, 1.24972, 0.7071087811829954, -5.446818314465185e-07, 0.7071047811842331, 3.14],
    9: [-5.75335, -6.78443, 1.24922, -0.6211878913418235, 0.47706391655198704, -0.6217198912487663, -2.250185307179586],
    10: [-6.84213, -5.43851, 1.24769, -0.24957712092775647, 0.9353594532102933, -0.25062712143651383, -1.637265307179586],
    11: [-7.17337, -4.45525, 1.24658, 0.6784298376894121, -0.2811449327376292, 0.6787418376147679, 2.59204],
    12: [-3.81682, -4.00637, 1.24596, -0.35656318068380227, 0.8631544373924009, -0.35752918117331056, -1.7169653071795858],
    13: [-11.4915, -0.777048, 1.24236, 0.2515470529294045, 0.9348661967103588, 0.25049805270867853, -1.6383953071795858],
}

def get_index_from_points(point):
    return list(points.values()).index(point) +1

edges = [
    (1,2),
    (2,3),
    (2,4),
    (4,5),
    (4,6),
    (6,7),
    (6,8),
    (6,9),
    (9,10),
    (10,12),
    (10,11),
    (10,13),
]

class SpatialAPI:
    def __init__(self, points, edges):
        self._graph = nx.Graph()
        self._graph.add_nodes_from(points)
        self._graph.add_edges_from(edges)
    
    def get_neighbors(self, pose_idx):
        return list(self._graph.adj[pose_idx])

    def get_shortest_path(self, source_idx, target_idx):
        return nx.shortest_path(self._graph, source_idx, target_idx)

