#!/bin/bash
# Stops push if Docker images fail unit tests and pushes images if successful
set -e

# --- Only run on main branch ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "‚ÑπÔ∏è  Pre-push hook skipped: not on main branch ($CURRENT_BRANCH)."
    exit 0
fi

COMPOSE_FILE="./app/docker-compose.yml"
GH_USERNAME="J-AutomationLab"
LOG_DIR=".log/prepush"

# Create log directory
mkdir -p "$LOG_DIR"

# --- Ensure GHCR credentials ---
if [ -z "$GH_TOKEN" ]; then
    echo "‚ö†Ô∏è  GH_TOKEN not found. Please enter your GitHub token or export it to avoid manual input:"
    read -s GH_TOKEN
fi
echo "$GH_TOKEN" | docker login ghcr.io 
if [ $? -eq 0 ]; then
    echo "‚úÖ Login succeeded"
else
    echo "‚ùå Login failed"
fi

echo "üü¢ Pre-push hook: Build and run unit tests. Images will be pushed if tests succeed."

# --- Build images (agent + simulator) ---
echo "üî® Building Docker images..."
BUILD_LOG="$LOG_DIR/build.log"
if docker compose -f $COMPOSE_FILE build &> "$BUILD_LOG"; then
    echo "‚úÖ Docker images built successfully."
else
    echo "‚ùå Docker build failed. Check $BUILD_LOG"
    cat "$BUILD_LOG"
    exit 1
fi

# --- Helper function to run a command, log output, and push image ---
run_command_and_push() {
    local cmd=("${!1}")   # command to execute, passed as array
    local image=$2         # image to push if successful
    local log_file=$3      # log file path

    echo "‚ñ∂Ô∏è  Running: ${cmd[*]} ... (logging to $log_file)"
    if "${cmd[@]}" &> "$log_file"; then
        echo "‚úÖ Command succeeded. Pushing image $image..." | tee -a "$log_file"
        docker push "$image" &>> "$log_file"
        return 0
    else
        echo "‚ùå Command failed. Not pushing image." | tee -a "$log_file"
        return 1
    fi
}

# --- Define commands and log files ---
CMD_AGENT=(docker compose -f $COMPOSE_FILE run --rm -e PYTHONWARNINGS="ignore" --entrypoint pytest agent -v ./tests)
LOG_AGENT="$LOG_DIR/agent.log"

CMD_SIMULATOR=(docker compose -f $COMPOSE_FILE run --rm -e PYTHONWARNINGS="ignore" --entrypoint pytest simulator-headless -v ./tests)
LOG_SIMULATOR="$LOG_DIR/simulator.log"

# --- Run commands in parallel ---
run_command_and_push CMD_AGENT[@] ghcr.io/j-automationlab/agent:latest "$LOG_AGENT" &
PID_AGENT=$!

run_command_and_push CMD_SIMULATOR[@] ghcr.io/j-automationlab/simulator:latest "$LOG_SIMULATOR" &
PID_SIMULATOR=$!

# --- Wait for all parallel jobs ---
wait $PID_AGENT
RC_AGENT=$?
wait $PID_SIMULATOR
RC_SIMULATOR=$?

# --- Final decision ---
if [ $RC_AGENT -eq 0 ] && [ $RC_SIMULATOR -eq 0 ]; then
    echo "üéâ All tests passed and images pushed. Pre-push OK."
    exit 0
else
    echo "‚ùå One or more tests failed. Push aborted."
    echo "Check logs in $LOG_DIR/"
    exit 1
fi
